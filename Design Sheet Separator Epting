import pandas as pd
from openpyxl import Workbook
from openpyxl.styles import Font, Border, Side, Alignment
from datetime import datetime
import re

def load_excel(file_path):
    """Loads an Excel document into a pandas DataFrame."""
    try:
        return pd.read_excel(file_path, header=None)
    except Exception as e:
        raise ValueError("Error loading the Excel file. Please check the file path and format.") from e

def format_date(value):
    """Formats a date value to MM/DD/YYYY."""
    try:
        if isinstance(value, str):
            date_obj = datetime.strptime(value, "%Y-%m-%d %H:%M:%S")
        elif isinstance(value, datetime):
            date_obj = value
        else:
            return value
        return date_obj.strftime("%m/%d/%Y")
    except (ValueError, TypeError):
        return value

def extract_value(row, key_index, key_name, all_keys):
    """Extracts the value associated with a key based on specific rules."""
    if key_name in ["AC", "FAU", "COIL", "HP", "AH"]:
        target_index = key_index + 1
        if target_index < len(row) and pd.notna(row[target_index]):
            return str(row[target_index]).strip()
    elif key_name == "LOT":
        for offset in range(1, len(row) - key_index):
            target_index = key_index + offset
            if target_index < len(row) and pd.notna(row[target_index]):
                value = row[target_index]
                if re.match(r"^\d+\s+.+", str(value), re.IGNORECASE):
                    return str(value).strip()
    elif key_name == "DATE":
        for offset in range(1, len(row) - key_index):
            target_index = key_index + offset
            if target_index < len(row) and pd.notna(row[target_index]):
                return format_date(row[target_index])
    elif key_name == "BUILDER":
        for offset in range(1, len(row) - key_index):
            target_index = key_index + offset
            if target_index < len(row) and pd.notna(row[target_index]):
                value = row[target_index]
                if re.match(r"^[A-Za-z\s]+$", str(value)):
                    return str(value).strip()
    return ""

def save_to_excel_with_left_quantities(output_path, layout, dataframe, all_keys):
    """Saves the provided data to a styled Excel document."""
    wb = Workbook()
    ws = wb.active
    header_font = Font(size=14, bold=True)
    border = Border(left=Side(style='thin'), right=Side(style='thin'),
                    top=Side(style='thin'), bottom=Side(style='thin'))
    alignment = Alignment(horizontal="center", vertical="center")

    for key, (row, col) in layout.items():
        associated_data = ""
        for index, df_row in dataframe.iterrows():
            for col_index, value in enumerate(df_row):
                transformed_key = str(value).strip().upper()
                if transformed_key.lower() == key.strip().lower():
                    associated_data = extract_value(df_row, col_index, key, all_keys)
                    break
        ws.cell(row=row, column=col, value=key).font = header_font
        ws.cell(row=row, column=col + 1, value=associated_data).alignment = alignment

    current_row_a = 12
    excluded_values = ["flex"]
    group_1_patterns = ["PLENUM", "MIXING BOX", "RETURN BOX", "TRANSFER BOX", "LINESET"]

    for index, df_row in dataframe.iterrows():
        for col_index, value in enumerate(df_row):
            transformed_key = str(value).strip().upper()
            if "lineset" in transformed_key.lower() and "flashing" in transformed_key.lower():
                continue
            if any(pattern.lower() in transformed_key.lower() for pattern in group_1_patterns):
                quantity = extract_left_quantity(df_row, col_index, excluded_values=excluded_values)
                if not quantity:
                    continue
                ws.cell(row=current_row_a, column=1, value=transformed_key).font = Font(size=12)
                ws.cell(row=current_row_a, column=2, value=quantity).font = Font(size=12)
                ws.cell(row=current_row_a, column=2).alignment = alignment
                current_row_a += 1

    current_row_d = 12
    group_2_patterns = [
        "4RFA", "4RHW", "4RS", "4RP5", "4RP4", "4RP3", "4RP18", "4RP12", "4RPA", "4RP6",
        "4REA90", "4RP24", "DRAIN PAN", "RED BRICK", "3/4 PVC", "1 1/8 PVC INSULATION", "BLOCK", "PAD"
    ]

    for index, df_row in dataframe.iterrows():
        for col_index, value in enumerate(df_row):
            transformed_key = str(value).strip().upper()
            if any(pattern.lower() in transformed_key.lower() for pattern in group_2_patterns):
                quantity = extract_left_quantity(df_row, col_index, excluded_values=excluded_values)
                if not quantity:
                    continue
                ws.cell(row=current_row_d, column=4, value=transformed_key).font = Font(size=12)
                ws.cell(row=current_row_d, column=5, value=quantity).font = Font(size=12)
                ws.cell(row=current_row_d, column=5).alignment = alignment
                current_row_d += 1

    for column_cells in ws.columns:
        max_length = 0
        col_letter = column_cells[0].column_letter
        for cell in column_cells:
            try:
                if cell.value:
                    max_length = max(max_length, len(str(cell.value)))
            except:
                pass
        adjusted_width = max_length + 2
        ws.column_dimensions[col_letter].width = adjusted_width

    for row in ws.iter_rows(min_row=1, max_row=ws.max_row, max_col=ws.max_column):
        for cell in row:
            cell.border = border

    wb.save(output_path)

def main():
    print("Welcome to the Excel Processor!")
    input_file_path = input("Enter the path to the input Excel file: ").strip()
    output_file_path = input("Enter the path to save the processed Excel file: ").strip()

    try:
        data = load_excel(input_file_path)

        layout = {
            "LOT": (1, 1),
            "DATE": (2, 1),
            "BUILDER": (3, 1),
            "TECH": (4, 1),
            "AC": (6, 1),
            "FAU": (7, 1),
            "COIL": (8, 1),
            "HP": (9, 1),
            "AH": (10, 1),
        }

        all_keys = set(layout.keys())

        save_to_excel_with_left_quantities(output_file_path, layout, data, all_keys)

        print(f"Processing complete! File saved to {output_file_path}")

    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()
