import pandas as pd
from openpyxl import Workbook
from openpyxl.styles import Font, Border, Side, Alignment
import re
from datetime import datetime

def load_excel(file_path):
    """Loads an Excel document into a pandas DataFrame."""
    try:
        return pd.read_excel(file_path, header=None)
    except Exception as e:
        raise ValueError("Error loading the Excel file. Please check the file path and format.") from e

def format_date(value):
    """Formats a date value to MM/DD/YYYY."""
    try:
        if isinstance(value, str):
            date_obj = datetime.strptime(value, "%Y-%m-%d %H:%M:%S")
        elif isinstance(value, datetime):
            date_obj = value
        else:
            return value
        return date_obj.strftime("%m/%d/%Y")
    except (ValueError, TypeError):
        return value

def extract_left_quantity(row, key_index, max_offset=3, excluded_values=None):
    """Extracts the first non-empty value up to `max_offset` columns to the left of the key."""
    if excluded_values is None:
        excluded_values = []

    for offset in range(1, max_offset + 1):
        left_index = key_index - offset
        if left_index >= 0:
            left_value = row[left_index]
            if (
                pd.notna(left_value)
                and isinstance(left_value, (int, float, str))
                and str(left_value).strip() != ""
                and str(left_value).strip().lower() not in [v.lower() for v in excluded_values]
            ):
                return str(left_value).strip()
    return ""

def transform_key(value):
    """Transforms specific keys based on rules."""
    if str(value).strip().upper() == "4RP2":
        return "4RP24"
    return str(value).strip()

def save_to_excel_with_left_quantities(output_path, layout, dataframe, all_keys):
    """Saves the provided data to a styled Excel document."""
    wb = Workbook()
    ws = wb.active
    header_font = Font(size=14, bold=True)
    border = Border(left=Side(style='thin'), right=Side(style='thin'),
                    top=Side(style='thin'), bottom=Side(style='thin'))
    alignment = Alignment(horizontal="center", vertical="center")

    # Add the main keys and their values
    for key, (row, col) in layout.items():
        associated_data = ""
        for index, df_row in dataframe.iterrows():
            for col_index, value in enumerate(df_row):
                transformed_key = transform_key(value)
                if transformed_key.lower() == key.strip().lower():
                    associated_data = extract_value(df_row, col_index, key, all_keys)
                    break
        ws.cell(row=row, column=col, value=key).font = header_font
        ws.cell(row=row, column=col + 1, value=associated_data).alignment = alignment

    # Group 1: Keys starting at Column A, Row 12
    current_row_a = 12
    excluded_values = ["flex"]
    group_1_patterns = ["PLENUM", "MIXING BOX", "RETURN BOX", "TRANSFER BOX", "LINESET"]

    for index, df_row in dataframe.iterrows():
        for col_index, value in enumerate(df_row):
            transformed_key = transform_key(value)
            value_str = str(transformed_key).strip().lower()
            if "lineset" in value_str and "flashing" in value_str:
                continue
            if any(pattern.lower() in value_str for pattern in group_1_patterns):
                quantity = extract_left_quantity(df_row, col_index, excluded_values=excluded_values)
                if quantity:  # Only include rows with a valid quantity
                    ws.cell(row=current_row_a, column=1, value=transformed_key).font = Font(size=12)
                    ws.cell(row=current_row_a, column=2, value=quantity).font = Font(size=12)
                    ws.cell(row=current_row_a, column=2).alignment = alignment
                    current_row_a += 1

    # Group 2: Keys starting at Column D, Row 12
    current_row_d = 12
    group_2_patterns = [
        "4RFA", "4RHW", "4RS", "4RP5", "4RP4", "4RP3", "4RP18", "4RP12", "4RPA", "4RP6",
        "4REA90", "4RP24", "DRAIN PAN", "RED BRICK", "3/4 PVC", "1 1/8 PVC INSULATION", "BLOCK"
    ]

    for index, df_row in dataframe.iterrows():
        for col_index, value in enumerate(df_row):
            transformed_key = transform_key(value)
            value_str = str(transformed_key).strip().lower()
            if any(pattern.lower() in value_str for pattern in group_2_patterns):
                quantity = extract_left_quantity(df_row, col_index, excluded_values=excluded_values)
                if quantity:  # Only include rows with a valid quantity
                    ws.cell(row=current_row_d, column=4, value=transformed_key).font = Font(size=12)
                    ws.cell(row=current_row_d, column=5, value=quantity).font = Font(size=12)
                    ws.cell(row=current_row_d, column=5).alignment = alignment
                    current_row_d += 1

    # Group 3: Keys starting at Column G, Row 12
    current_row_g = 12
    group_3_patterns = [
        '4" HARD PIPE', '14" HARD PIPE', '97FC-5', '9X7X7 WYE',
        '4X12X7 END BOOT', '4X10X4 END BOOT', '4" SOFFIT CAP', '4" 90 EL', '4" R 4.2'
    ]

    for index, df_row in dataframe.iterrows():
        for col_index, value in enumerate(df_row):
            transformed_key = transform_key(value)
            value_str = str(transformed_key).strip().lower()
            if '4" r 4.2' in value_str:  # Special rule for 4" R 4.2
                next_cell = df_row[col_index + 1] if col_index + 1 < len(df_row) else ""
                if str(next_cell).strip().lower() == "flex":
                    transformed_key += " FLEX"
            if any(pattern.lower() in value_str for pattern in group_3_patterns):
                quantity = extract_left_quantity(df_row, col_index, excluded_values=excluded_values)
                if quantity:  # Only include rows with a valid quantity
                    ws.cell(row=current_row_g, column=7, value=transformed_key).font = Font(size=12)
                    ws.cell(row=current_row_g, column=8, value=quantity).font = Font(size=12)
                    ws.cell(row=current_row_g, column=8).alignment = alignment
                    current_row_g += 1

    # Auto-format column widths
    for column_cells in ws.columns:
        max_length = 0
        col_letter = column_cells[0].column_letter
        for cell in column_cells:
            try:
                if cell.value:
                    max_length = max(max_length, len(str(cell.value)))
            except:
                pass
        adjusted_width = max_length + 2
        ws.column_dimensions[col_letter].width = adjusted_width

    # Apply border styling with exceptions for irrelevant cells
    for row in ws.iter_rows(min_row=1, max_row=ws.max_row, max_col=ws.max_column):
        for cell in row:
            if cell.value is None or str(cell.value).strip() == "":
                # Remove borders for irrelevant cells
                cell.border = None
            elif cell.column_letter == "C":
                # Apply only left and right borders for Column C
                cell.border = Border(left=Side(style='thin'), right=Side(style='thin'))
            elif cell.row in [5, 11]:
                # Outline borders only for Rows 5 and 11
                if cell.column == 1:  # Left-most cell
                    cell.border = Border(left=Side(style='thin'), top=Side(style='thin'), bottom=Side(style='thin'))
                elif cell.column == ws.max_column:  # Right-most cell
                    cell.border = Border(right=Side(style='thin'), top=Side(style='thin'), bottom=Side(style='thin'))
                else:  # Middle cells
                    cell.border = Border(top=Side(style='thin'), bottom=Side(style='thin'))
            else:
                # Apply standard border to all other cells
                cell.border = border

    # Always ensure Column B, Row 4 has borders
    ws.cell(row=4, column=2).border = border

    wb.save(output_path)

def main():
    input_file_path = "input file path"
    output_file_path = "output file path"

    data = load_excel(input_file_path)

    layout = {
        "LOT": (1, 1),
        "DATE": (2, 1),
        "BUILDER": (3, 1),
        "TECH": (4, 1),
        "AC": (6, 1),
        "FAU": (7, 1),
        "COIL": (8, 1),
        "HP": (9, 1),
        "AH": (10, 1),
    }

    all_keys = set(layout.keys())

    save_to_excel_with_left_quantities(output_file_path, layout, data, all_keys)

if __name__ == "__main__":
    main()
